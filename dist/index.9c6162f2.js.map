{"mappings":"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","sources":["src/theme_handler.js"],"sourcesContent":["/* File: theme_handler.js */\n\n/* =====================\n   1) Immediately Load Theme from localStorage to prevent flashes\n   ===================== */\n   (function () {\n    const storedThemeVars = localStorage.getItem('themeVariables');\n    if (storedThemeVars) {\n      const themeVars = JSON.parse(storedThemeVars);\n      for (const varName in themeVars) {\n        document.documentElement.style.setProperty(varName, themeVars[varName]);\n      }\n    }\n  })();\n  \n  /* =====================\n     2) HSL -> Hex Conversion\n     ===================== */\n  function hslToHex(h, s, l) {\n    l /= 100;\n    const a = (s * Math.min(l, 1 - l)) / 100;\n    const f = (n) => {\n      const k = (n + h / 30) % 12;\n      const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n      return Math.round(255 * color)\n        .toString(16)\n        .padStart(2, '0');\n    };\n    return `#${f(0)}${f(8)}${f(4)}`;\n  }\n  \n  /* =====================\n     3) Contrast (for text color)\n     ===================== */\n  function getContrastingTextColor(backgroundColor) {\n    const hex = backgroundColor.replace('#', '');\n    const r = parseInt(hex.substr(0, 2), 16) / 255;\n    const g = parseInt(hex.substr(2, 2), 16) / 255;\n    const b = parseInt(hex.substr(4, 2), 16) / 255;\n  \n    const srgb = [r, g, b].map((c) => {\n      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n    });\n    const luminance = 0.2126 * srgb[0] + 0.7152 * srgb[1] + 0.0722 * srgb[2];\n    return luminance > 0.179 ? '#000000' : '#FFFFFF';\n  }\n  \n  /* =====================\n     4) Generate a Color Scheme\n     ===================== */\n  function generateColorScheme() {\n    const harmonies = ['monochromatic', 'analogous', 'complementary', 'triadic'];\n    const harmony = harmonies[Math.floor(Math.random() * harmonies.length)];\n    const baseHue = Math.floor(Math.random() * 360);\n  \n    let hues = [];\n    switch (harmony) {\n      case 'monochromatic':\n        hues = [baseHue];\n        break;\n      case 'analogous':\n        hues = [baseHue, (baseHue + 30) % 360, (baseHue - 30 + 360) % 360];\n        break;\n      case 'complementary':\n        hues = [baseHue, (baseHue + 180) % 360];\n        break;\n      case 'triadic':\n        hues = [baseHue, (baseHue + 120) % 360, (baseHue + 240) % 360];\n        break;\n    }\n  \n    const saturation = 40;\n    const lightness = 75;\n    const colors = hues.map((h) => hslToHex(h, saturation, lightness));\n  \n    let scheme = {};\n    if (harmony === 'monochromatic') {\n      scheme = {\n        '--background-color': colors[0],\n        '--primary-color': hslToHex(baseHue, saturation, lightness - 10),\n        '--secondary-color': hslToHex(baseHue, saturation, lightness - 20),\n        '--accent-color': hslToHex(baseHue, saturation, lightness - 5),\n        '--neutral-color': hslToHex(baseHue, 30, 95),\n      };\n    } else if (harmony === 'analogous') {\n      scheme = {\n        '--background-color': colors[0],\n        '--primary-color': colors[1],\n        '--secondary-color': colors[2],\n        '--accent-color': hslToHex(baseHue, saturation, lightness - 10),\n        '--neutral-color': hslToHex(baseHue, 30, 95),\n      };\n    } else if (harmony === 'complementary') {\n      scheme = {\n        '--background-color': colors[0],\n        '--primary-color': colors[1],\n        '--secondary-color': hslToHex((baseHue + 90) % 360, 30, 85),\n        '--accent-color': hslToHex((baseHue - 90 + 360) % 360, 30, 85),\n        '--neutral-color': hslToHex(baseHue, 30, 95),\n      };\n    } else if (harmony === 'triadic') {\n      scheme = {\n        '--background-color': colors[0],\n        '--primary-color': colors[1],\n        '--secondary-color': colors[2],\n        '--accent-color': hslToHex((baseHue + 60) % 360, 30, 85),\n        '--neutral-color': hslToHex(baseHue, 30, 95),\n      };\n    }\n  \n    scheme['--text-color'] = getContrastingTextColor(scheme['--background-color']);\n    return scheme;\n  }\n  \n  /* =====================\n     5) Apply Color Scheme\n     ===================== */\n  function applyColorScheme(scheme) {\n    for (const varName in scheme) {\n      document.documentElement.style.setProperty(varName, scheme[varName]);\n    }\n  }\n  \n  /* =====================\n     6) Store Current Theme\n     ===================== */\n  function storeCurrentThemeInLocalStorage() {\n    let themeVars = {};\n    const rootStyles = getComputedStyle(document.documentElement);\n    const variables = [\n      '--background-color',\n      '--primary-color',\n      '--secondary-color',\n      '--accent-color',\n      '--neutral-color',\n      '--text-color',\n    ];\n    variables.forEach((varName) => {\n      themeVars[varName] = rootStyles.getPropertyValue(varName).trim();\n    });\n    localStorage.setItem('themeVariables', JSON.stringify(themeVars));\n  }\n  \n  /* =====================\n     7) Monochrome Scheme\n     ===================== */\n  function applyMonochrome() {\n    const monoScheme = {\n      '--background-color': '#f5f5f5',\n      '--primary-color': '#4a4a4a',\n      '--secondary-color': '#6e6e6e',\n      '--accent-color': '#9e9e9e',\n      '--text-color': '#1a1a1a',\n      '--neutral-color': '#ffffff',\n    };\n    applyColorScheme(monoScheme);\n  }\n  \n  /* =====================\n     8) Button Logic on DOM Load\n     ===================== */\n  document.addEventListener('DOMContentLoaded', () => {\n    // If we haven't stored \"isMonochrome\" yet, default to true\n    let isMonochrome = localStorage.getItem('isMonochrome');\n    if (isMonochrome === null) {\n      isMonochrome = 'true';\n      localStorage.setItem('isMonochrome', 'true');\n    }\n  \n    // Convert to boolean\n    isMonochrome = (isMonochrome === 'true');\n  \n    // If we are currently in a \"random\" theme, set the button text accordingly\n    const toggleButton = document.getElementById('theme-toggle');\n    if (toggleButton) {\n      if (isMonochrome) {\n        toggleButton.textContent = \"Randomize Colours\";\n      } else {\n        toggleButton.textContent = \"Monochrome Mode\";\n      }\n  \n      toggleButton.addEventListener('click', () => {\n        if (isMonochrome) {\n          // Switch to random scheme\n          const newScheme = generateColorScheme();\n          applyColorScheme(newScheme);\n          toggleButton.textContent = \"Monochrome Mode\";\n          isMonochrome = false;\n          localStorage.setItem('isMonochrome', 'false');\n        } else {\n          // Switch back to monochrome\n          applyMonochrome();\n          toggleButton.textContent = \"Randomize Colours\";\n          isMonochrome = true;\n          localStorage.setItem('isMonochrome', 'true');\n        }\n  \n        // Always store the new theme variables\n        storeCurrentThemeInLocalStorage();\n      });\n    }\n  });\n  "],"names":[],"version":3,"file":"index.9c6162f2.js.map","sourceRoot":"/__parcel_source_root/"}