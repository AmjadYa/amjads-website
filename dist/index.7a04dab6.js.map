{"mappings":"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","sources":["src/theme.js"],"sourcesContent":["/**\n * src/theme.js\n * \n * Provides global color-randomization logic and immediate\n * application of the stored theme to avoid flicker.\n */\n(function () {\n    // 1) Immediately apply stored theme (avoid flash of default)\n    const storedTheme = localStorage.getItem('themeVariables');\n    if (storedTheme) {\n      const themeVars = JSON.parse(storedTheme);\n      for (const varName in themeVars) {\n        document.documentElement.style.setProperty(varName, themeVars[varName]);\n      }\n    }\n  \n    // 2) Also check if we're stored as \"monochrome\" or not\n    let isMonochrome = localStorage.getItem('isMonochrome') === 'true';\n  \n    // Provide utility functions in window scope\n    window.ThemeManager = {\n      // Generate a random color scheme\n      generateColorScheme() {\n        // Helper: HSL -> Hex\n        function hslToHex(h, s, l) {\n          l /= 100;\n          const a = (s * Math.min(l, 1 - l)) / 100;\n          const f = (n) => {\n            const k = (n + h / 30) % 12;\n            const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n            return Math.round(255 * color).toString(16).padStart(2, '0');\n          };\n          return `#${f(0)}${f(8)}${f(4)}`;\n        }\n  \n        // Helper: get contrasting text color\n        function getContrastingTextColor(bg) {\n          const hex = bg.replace('#', '');\n          const r = parseInt(hex.substr(0, 2), 16) / 255;\n          const g = parseInt(hex.substr(2, 2), 16) / 255;\n          const b = parseInt(hex.substr(4, 2), 16) / 255;\n          const srgb = [r, g, b].map((c) =>\n            c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4)\n          );\n          const luminance = 0.2126 * srgb[0] + 0.7152 * srgb[1] + 0.0722 * srgb[2];\n          return luminance > 0.179 ? '#000000' : '#FFFFFF';\n        }\n  \n        const harmonies = ['monochromatic', 'analogous', 'complementary', 'triadic'];\n        const harmony = harmonies[Math.floor(Math.random() * harmonies.length)];\n        const baseHue = Math.floor(Math.random() * 360);\n  \n        let hues = [];\n        switch (harmony) {\n          case 'monochromatic':\n            hues = [baseHue];\n            break;\n          case 'analogous':\n            hues = [baseHue, (baseHue + 30) % 360, (baseHue - 30 + 360) % 360];\n            break;\n          case 'complementary':\n            hues = [baseHue, (baseHue + 180) % 360];\n            break;\n          case 'triadic':\n            hues = [baseHue, (baseHue + 120) % 360, (baseHue + 240) % 360];\n            break;\n        }\n  \n        const saturation = 40;\n        const lightness = 75;\n        const colors = hues.map((h) => hslToHex(h, saturation, lightness));\n  \n        let scheme = {};\n        if (harmony === 'monochromatic') {\n          scheme = {\n            '--background-color': colors[0],\n            '--primary-color': hslToHex(baseHue, saturation, lightness - 10),\n            '--secondary-color': hslToHex(baseHue, saturation, lightness - 20),\n            '--accent-color': hslToHex(baseHue, saturation, lightness - 5),\n            '--neutral-color': hslToHex(baseHue, 30, 95),\n          };\n        } else if (harmony === 'analogous') {\n          scheme = {\n            '--background-color': colors[0],\n            '--primary-color': colors[1],\n            '--secondary-color': colors[2],\n            '--accent-color': hslToHex(baseHue, saturation, lightness - 10),\n            '--neutral-color': hslToHex(baseHue, 30, 95),\n          };\n        } else if (harmony === 'complementary') {\n          scheme = {\n            '--background-color': colors[0],\n            '--primary-color': colors[1],\n            '--secondary-color': hslToHex((baseHue + 90) % 360, 30, 85),\n            '--accent-color': hslToHex((baseHue - 90 + 360) % 360, 30, 85),\n            '--neutral-color': hslToHex(baseHue, 30, 95),\n          };\n        } else if (harmony === 'triadic') {\n          scheme = {\n            '--background-color': colors[0],\n            '--primary-color': colors[1],\n            '--secondary-color': colors[2],\n            '--accent-color': hslToHex((baseHue + 60) % 360, 30, 85),\n            '--neutral-color': hslToHex(baseHue, 30, 95),\n          };\n        }\n  \n        scheme['--text-color'] = getContrastingTextColor(scheme['--background-color']);\n        return scheme;\n      },\n  \n      // Apply a given scheme to :root\n      applyColorScheme(scheme) {\n        for (const varName in scheme) {\n          document.documentElement.style.setProperty(varName, scheme[varName]);\n        }\n      },\n  \n      // Save current root variables to localStorage\n      storeCurrentTheme() {\n        const rootStyles = getComputedStyle(document.documentElement);\n        const varList = [\n          '--background-color',\n          '--primary-color',\n          '--secondary-color',\n          '--accent-color',\n          '--neutral-color',\n          '--text-color',\n        ];\n        let themeVars = {};\n        varList.forEach((v) => {\n          themeVars[v] = rootStyles.getPropertyValue(v).trim();\n        });\n        localStorage.setItem('themeVariables', JSON.stringify(themeVars));\n      },\n  \n      // Apply monochrome scheme\n      applyMonochrome() {\n        const monoScheme = {\n          '--background-color': '#f5f5f5',\n          '--primary-color': '#4a4a4a',\n          '--secondary-color': '#6e6e6e',\n          '--accent-color': '#9e9e9e',\n          '--text-color': '#1a1a1a',\n          '--neutral-color': '#ffffff',\n        };\n        this.applyColorScheme(monoScheme);\n      },\n  \n      // isMonochrome state\n      isMonochrome: isMonochrome,\n    };\n  \n    // 3) Wait for DOM to attach a possible toggle button\n    window.addEventListener('DOMContentLoaded', () => {\n      const toggleBtn = document.querySelector('.theme-toggle');\n      if (!toggleBtn) return; // If some pages have no toggle, do nothing\n  \n      // Initialize button text\n      if (window.ThemeManager.isMonochrome) {\n        toggleBtn.textContent = 'Randomize Colours';\n      } else {\n        toggleBtn.textContent = 'Monochrome Mode';\n      }\n  \n      // Handle toggling\n      toggleBtn.addEventListener('click', () => {\n        if (window.ThemeManager.isMonochrome) {\n          // Switch to random\n          const newScheme = window.ThemeManager.generateColorScheme();\n          window.ThemeManager.applyColorScheme(newScheme);\n          window.ThemeManager.isMonochrome = false;\n          toggleBtn.textContent = 'Monochrome Mode';\n        } else {\n          // Switch to mono\n          window.ThemeManager.applyMonochrome();\n          window.ThemeManager.isMonochrome = true;\n          toggleBtn.textContent = 'Randomize Colours';\n        }\n        window.ThemeManager.storeCurrentTheme();\n        localStorage.setItem('isMonochrome', window.ThemeManager.isMonochrome);\n      });\n    });\n  })();\n  "],"names":[],"version":3,"file":"index.7a04dab6.js.map","sourceRoot":"/__parcel_source_root/"}